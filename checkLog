#! /usr/bin/python

import sys
import ConfigParser
from subprocess import check_output


############### Config #####################

usage = \
'\n  A script to parse and display logs\n' + \
'\n' + \
'   Usage:\n' + \
'       checkLog.py [log] [options]\n' + \
'\n' + \
'       log = the program whose log you want to see;\n' + \
'             can be "all" to display all the logs \n' + \
'\n' + \
'       options:\n' + \
'\n' + \
'           -t [n] = take only the last n lines\n' + \
'           -d [date] = take only lines from the specified date;\n' + \
'           -to = take only lines from today\n' + \
'           -w = take only lines with level WARN, CRITICAL or ERROR\n' + \
'           -g [expression] = take only lines with the expression;\n' + \
'                             not case sensitive\n' + \
'           -h = display this message\n'


# logs directories
openstackComponentsLogsDirectory = '/var/log/'

# dictionaries that map parameters to files
logFiles       = { 'glance' : 'glance/api.log',
                   'glance-api' : 'glance/api.log',
                   'glance-registry' : 'glance/registry.log',
                   'heat' : 'heat/heat-manage.log',
                   'heat-api-cfn' : 'heat/heat-api-cfn.log',
                   'heat-api' : 'heat/heat-api.log',
                   'heat-engine' : 'heat/heat-engine.log',
                   'heat-manage' : 'heat/heat-manage.log',
                   'keystone' : 'keystone/keystone.log',
                   'keystone-tokenflush' : 'keystone/keystone-tokenflush.log',
                   'mariadb' : 'mariadb/server.log',
                   'neutron' : 'neutron/server.log',
                   'nova' : 'nova/nova-api.log',
                   'nova-api' : 'nova/nova-api.log',
                   'nova-cert' : 'nova/nova-cert.log',
                   'nova-conductor' : 'nova/nova-conductor.log',
                   'nova-consoleauth' : 'nova/nova-consoleauth.log',
                   'nova-manage' : 'nova/nova-manage.log',
                   'nova-novncproxy' : 'nova/nova-novncproxy.log',
                   'nova-scheduler' : 'nova/nova-scheduler.log',
                   'rabbit' : 'rabbitmq/rabbit@localhost.log',
                   'rabbitmq' : 'rabbitmq/rabbit@localhost.log',
                   'rabbitmq-localhost-sasl' : 'rabbitmq/rabbit@localhost-sasl.log'}

# componentsLogs = { 'glance' : 'glance/api.log',
#                    'glance-api' : 'glance/api.log',
#                    'glance-registry' : 'glance/registry.log',
#                    'heat' : 'heat/heat-manage.log',
#                    'heat-api-cfn' : 'heat/heat-api-cfn.log',
#                    'heat-api' : 'heat/heat-api.log',
#                    'heat-engine' : 'heat/heat-engine.log',
#                    'heat-manage' : 'heat/heat-manage.log',
#                    'keystone' : 'keystone/keystone.log',
#                    'keystone-tokenflush' : 'keystone/keystone-tokenflush.log',
#                    'mariadb' : 'mariadb/server.log',
#                    'neutron' : 'neutron/server.log',
#                    'nova' : 'nova/nova-api.log',
#                    'nova-api' : 'nova/nova-api.log',
#                    'nova-cert' : 'nova/nova-cert.log',
#                    'nova-conductor' : 'nova/nova-conductor.log',
#                    'nova-consoleauth' : 'nova/nova-consoleauth.log',
#                    'nova-manage' : 'nova/nova-manage.log',
#                    'nova-novncproxy' : 'nova/nova-novncproxy.log',
#                    'nova-scheduler' : 'nova/nova-scheduler.log',
#                    'rabbit' : 'rabbitmq/rabbit@localhost.log',
#                    'rabbitmq' : 'rabbitmq/rabbit@localhost.log',
#                    'rabbitmq-localhost-sasl' : 'rabbitmq/rabbit@localhost-sasl.log'}

# deploymentLogs = { 'basic-network' : 'basic-network.log',
#                    'glance_deployment' : 'glance_deployment.log',
#                    'horizon_deployment' : 'horizon_deployment.log',
#                    'heat_deployment' : 'heat_deployment.log',
#                    'keystone_deployment' : 'keystone_deployment.log',
#                    'neutron_deployment' : 'neutron_deployment.log',
#                    'nova_deployment' : 'nova_deployment.log',
#                    'rabbit_deployment' : 'rabbit_deployment.log',
#                    'swift_deployment' : 'swift_deployment.log'}

# add directory and concatenate
# logFiles = dict()
# for program in componentsLogs:
#     logFiles[program] = openstackComponentsLogsDirectory + componentsLogs[program]
# for program in deploymentLogs:
#     logFiles[program] = deploymentLogsDirectory + deploymentLogs[program]

logFiles = {program:(openstackComponentsLogsDirectory + logFiles[program]) for program in logFiles.keys()}
logFiles['deployment'] = '/tmp/test.log'


############# Log display #####################

def showLog(log,date="",past="",tail="",warn=False,grep=""):
    # prints a log to the screen, according to specifications
    log_lines = open(log,'r').readlines()

    if date:
        # filter according to the date
        if date == 'today':
            date = check_output('date -Idate',shell=True).strip()
        log_lines = [line for line in log_lines if date in line]

    if tail:
        # grab only the last X lines
        try:
            nLines = int(tail)
        except:
            raise ValueError("Invalid parameter for tail (-t)")

        log_lines = log_lines[-nLines:]

    if warn:
        # filter lines according to specified error
        log_lines = [line for line in log_lines \
                if 'warn' in line.lower() \
                or 'critical' in line.lower() \
                or 'error' in line.lower() ]

    if grep:
        # take only lines that have the expression
        log_lines = [line for line in log_lines if grep.lower() in line.lower()]

    # if past:
    #     # filter to only the past X hours or minutes
    #     currentTime = check_output("date +'%H %M %S'",shell=True).split()
    #     if past.lower()[-1] == 'm':
    #         # user wants logs from the past X minutes
    #         minutesAgo = int(past[:-1])
            
    #         initalTime[3] = '00'
    #         initalTime[2] = currentTime[2]
    #         currentTime[0] -= minutes // 60
    #     log_lines = [line for line in log_lines if date in line]

    # concatenate lines and return them
    return "".join(log_lines)


######################## Main ###########################

def main(args):

    if '-h' in args:
        print usage
        return

    log = args[0].lower()
    if log != 'all':
        if log in logFiles:
            logFile = logFiles[log]
        else:
            logMatches = [item for item in logFiles.keys() if log in item]
            if len(logMatches) == 0:
                raise ValueError('Not a valid parameter for log: ' + log)
            elif len(logMatches) == 1:
                logFile = logFiles[logMatches[0]]
            else:
                print 'Did you mean'
                for match in logMatches:
                    print match,
                return

    date = past = tail = level = grep = ""
    warn = False
    if '-d' in args:
        date = args[ args.index('-d') + 1 ]
    if '-to' in args:
        date = 'today'
    if '-p' in args:
        past = args[ args.index('-p') + 1 ]
    if '-t' in args:
        tail = args[ args.index('-t') + 1 ]
    if '-w' in args:
        warn = True
    if '-g' in args:
        grep = args[ args.index('-g') + 1 ]

    if log == 'all':
        allLogs = [l for l in deploymentLogs.values() ] + \
                [l for l in componentsLogs.values() ]
        for l in allLogs:
            print showLog(l,date,past,tail,warn,grep)
    else:
        print showLog(logFile,date,past,tail,warn,grep)





if __name__=="__main__":
    main(sys.argv[1:])

