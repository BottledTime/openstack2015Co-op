#! /usr/bin/python

"""
A script to deploy the fabfiles by number.

Run with the -h option to see usage
"""

import sys
import os
from fabric.colors import green, red, blue
from fabric.api import local
from subprocess import check_output

class Options:
    """
    Holds all the options 
    that are used throughout the script
    """

    def __init__(self):
        self.verbose = False
        self.warnOnly = False
        self.onlyOne = False

        self.logfile = 'deploy_log'
        self.task = 'deploy'
        self.first = '0'
        self.last = '14'

    def getOptions(self,params): 
        """
        From a list of parameters taken 
        from the command line, set the options
        """

        while '-' in params[0]:
            shift = 1
            if 'h' in params[0]:
                showUsage()
            if 'v' in params[0]:
                self.verbose = True
            if 'w' in params[0]:
                self.warnOnly = True

            if 't' in params[0]:
                self.task = params[1]
                shift += 1
            elif 'f' in params[0]:
                self.logfile = params[1]
                shift += 1

            # shift
            for i in range(shift):
                del params[0]

        self.first = params[0]
        if len(params) >= 2:
            self.last = params[1]
        else:
            self.onlyOne = True
            self.last = self.first




def printErrors(log):

    err = 'FAIL'

    if err not in log:
        return False
    else:
        print red('\n\nThere were errors in the task:\n')
        errors = [l for l in log.splitlines() if err in l]
        for line in errors:
            print line
        return True

def fab(directories,opt):

    # put date in logfile
    check_output('echo -e "\n\n$(date)\n\n" >>'+opt.logfile, shell=True)

    for direc in directories:
        os.chdir(direc)
        print blue("\n\t\tNow in directory {}".format(direc))

        # print blue("\n\t\tRunning task " + opt.task)
        command = "fab %s | tee -a ../%s" % (opt.task,opt.logfile)
        out = check_output(command, shell=True)
        if opt.verbose:
            print out

        err = printErrors(out)
        if err and not opt.warnOnly:
            # abort 
            sys.exit()

        os.chdir('..')

def getDirectories(first,last):

    strDirectories = check_output("ls | grep -P '^\d' | sort -g", shell=True)
    dirs = strDirectories.splitlines()

    iFirst = 0
    while not dirs[iFirst].startswith(first):
        iFirst += 1

    iLast = -1
    while not dirs[iLast].startswith(last):
        iLast -= 1

    return dirs[iFirst : iLast+1]

    # if first == last:
    #     # only one parameter
    #     return [d for d in dirs if d.startswith(first)]


    # iFirst = first
    # iLast = last
    # for i, d in enumerate(dirs):
    #     if d.startswith(first):
    #         iFirst = i
    #     elif d.startswith(last):
    #         iLast = i

    # if type(iFirst) == str:
    #     raise ValueError("Fabfile %s doesn't exist!" % iFirst)
    # elif type(iLast) == str:
    #     raise ValueError("Fabfile %s doesn't exist!" % iLast)

    # return dirs[iFirst : iLast+1]

def showUsage():
    us = """
    ./deploy [-options] f l

       where
         f : first script, by number
         l : last script, by number

       options:
         -h : show usage
         -t [task] : specify a fabric task to run, such as 'tdd'
         -v : verbose
         -w : warn only. Script won't abort if there is an error in a task
         -f [path] : choose a file to log results in; default is 'deploy_log'
    """
    print us
    sys.exit()
        

if __name__=="__main__":

    # opt = Options()
    # params = sys.argv[1:]
    # opt.getOptions(params)

    # dirs = getDirectories(opt.first, opt.last)
    # fab(dirs, opt)

    print getDirectories('0','15')

